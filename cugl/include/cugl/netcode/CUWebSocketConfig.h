//
//  CUWebSocketConfig.h
//  Cornell University Game Library (CUGL)
//
//  This module provides the configuratiion for a WebSocket server. The
//  configuration is designed to be compatible with libdatachannels:
//
//      https://github.com/paullouisageneau/libdatachannel
//
//  Because configurations are intended to be on the stack, we do not provide
//  explicit shared pointer support for this class.
//
//
//  CUGL MIT License:
//      This software is provided 'as-is', without any express or implied
//      warranty.  In no event will the authors be held liable for any damages
//      arising from the use of this software.
//
//      Permission is granted to anyone to use this software for any purpose,
//      including commercial applications, and to alter it and redistribute it
//      freely, subject to the following restrictions:
//
//      1. The origin of this software must not be misrepresented; you must not
//      claim that you wrote the original software. If you use this software
//      in a product, an acknowledgment in the product documentation would be
//      appreciated but is not required.
//
//      2. Altered source versions must be plainly marked as such, and must not
//      be misrepresented as being the original software.
//
//      3. This notice may not be removed or altered from any source distribution.
//
//  Author: Walker White
//  Version: 7/6/24
//
#ifndef __CU_WEBSOCKET_CONFIG_H__
#define __CU_WEBSOCKET_CONFIG_H__
#include <cugl/netcode/CUInetAddress.h>
#include <memory>
#include <vector>
#include <string>

namespace cugl {

    /**
     * The classes to support CUGL networking.
     *
     * Currently CUGL supports ad-hoc game lobbies using web-sockets. The
     * sockets must connect connect to a CUGL game lobby server. However,
     * the actual network layer is supported by high speed WebRTC. See
     *
     *     https://libdatachannel.org
     *
     * for an explanation of our networking layer.
     */
    namespace netcode {

/**
 * This class represents the configuration for our websocket server
 *
 * Each {@link WebSocketServer} has a configuration that cannot be changed
 * once the server is initialized.. This configuration controls such things as
 * the port, the binding address, the protocol (ws:// vs wss://), and other
 * communication settings. With that said, none of these values are required
 * as they all have defaults.
 *
 * This class is effectively a simple struct. All attributes are publicly
 * available and we do not use the standard CUGL shared pointer architecture.
 * Internet addresses are designed to be use on the stack, though you can
 * combine them with shared pointers Ã¥if you wish.
 */
class WebSocketConfig {
public:
    /** The server port (default: 8080) */
    uint16_t port;

    /**
     * The local internet address to bind to (default: "").
     *
     * If this is empty, then the default local address will be used.
     */
    std::string bindaddr;

    /** Whether the websocket requires an SSL connection (default: false) */
    bool secure;

    /**
     * The PEM certificate or a path to a file containing the PEM certificate (default: "").
     *
     * This attribute is only read if secure is true. If the string is empty,
     * the network layer attempts to use an autogenerated certificate.
     */
    std::string pemCertificate;

    /**
     * The PEM key or a path to a file containing the PEM key (default: "").
     *
     * This attribute is only read if secure is true. If pemCertificate is
     * empty (so the certificate is autogenereated), this should be empty too.
     */
    std::string pemKey;

    /**
     * The PEM key passphrase (default: "")
     *
     * This attribute is only read if secure is true. If there is no passphrase,
     * this should be empty.
     */
    std::string pemPass;

    /**
     * The connection timeout in milliseconds (default 0 for automatic)
     *
     * The server will drop connections that lag more than the timeout amount.
     * To disable timeouts, set this value to a negative number. Choosing 0
     * causes the server to use a default timeout.
     */
    int32_t timeout;

    /**
     * The message buffer size (default 0 for automatic)
     *
     * This value is the number of messages that can be received before
     * a dispatcher must be called. This value is coupled to the maximum
     * message size. If this value is small, then maximum message size may
     * need to be increased to support data throughput.
     */
    size_t bufferSize;

    /**
     * The maximum message size (default 0 for automatic)
     *
     * This value is the maximum size of a single message, which is one call
     * to a dispatcher. It is coupled to the message buffer size. If this
     * value is smalled, the buffer size may need to be increased to support
     * data throughput.
     */
    size_t maxMessage;


#pragma mark Constructors
    /**
     * Creates a new configuration.
     *
     * All values will be defaults. The lobby server will be set to 'localhost"
     * at port 8080.
     */
    WebSocketConfig();

    /**
     * Creates a new configuration with the given port.
     *
     * All other values will be defaults.
     */
    WebSocketConfig(uint16_t port);

    /**
     * Creates a new configuration with the given bind address.
     *
     * All other values will be defaults.
     */
    WebSocketConfig(const InetAddress& address);

    /**
     * Creates this configuration using a JSON entry.
     *
     * The JSON value should be an object. While all keys are optional, it
     * supports the following entries:
     *
     *      "port":         The port to bind to
     *      "address":      The local address to bind to
     *      "secure":       A boolean indicating if the server uses SSL
     *      "certificate":  Either the PEM certficate, or a path to the certificate
     *      "pemkey":       Either the PEM key, or a path to the key
     *      "pempass":      The PEM pass phrase
     *      "timeout":      An int representing the connection timeout
     *      "buffer size":  An int respresenting the size of the message buffer
     *      "max message":  An int respresenting the maximum transmission size
     *
     * @param prefs     The configuration settings
     */
    WebSocketConfig(const std::shared_ptr<JsonValue>& prefs);

    /**
     * Creates a copy of the configuration.
     *
     * This copy constructor is provided so that internet addresses may be
     * safely used on the stack, without the use of pointers.
     *
     * @param src    The original configuration to copy
     */
    WebSocketConfig(const WebSocketConfig& src) = default;

    /**
     * Creates a new configuration with the resources of the given one.
     *
     * This move constructor is provided so that internet addresses may be
     * used efficiently on the stack, without the use of pointers.
     *
     * @param src    The original configuration contributing resources
     */
    WebSocketConfig(WebSocketConfig&& src) = default;

    /**
     * Deletes this configuration, disposing all resources
     */
    ~WebSocketConfig();

#pragma mark Assignment
    /**
     * Assigns this configuration to be a copy of the given configuration.
     *
     * @param src   The configuration to copy
     *
     * @return a reference to this configuration for chaining purposes.
     */
    WebSocketConfig& operator=(const WebSocketConfig& src) = default;

    /**
     * Assigns this configuration to have the resources of the given configuration.
     *
     * @param src   The configuration to take resources from
     *
     * @return a reference to this configuration for chaining purposes.
     */
    WebSocketConfig& operator=(WebSocketConfig&& src) = default;

    /**
     * Assigns this configuration to be a copy of the given configuration.
     *
     * @param src   The configuration to copy
     *
     * @return a reference to this configuration for chaining purposes.
     */
    WebSocketConfig& set(const WebSocketConfig& src);

    /**
     * Assigns this configuration to be a copy of the given configuration.
     *
     * @param src   The configuration to copy
     *
     * @return a reference to this configuration for chaining purposes.
     */
    WebSocketConfig& set(const std::shared_ptr<WebSocketConfig>& src);

    /**
     * Assigns this configuration according to the given JSON object
     *
     * The JSON value should be an object. While all keys are optional, it
     * supports the following entries:
     *
     *      "port":         The port to bind to
     *      "address":      The local address to bind to
     *      "secure":       A boolean indicating if the server uses SSL
     *      "certificate":  Either the PEM certficate, or a path to the certificate
     *      "pemkey":       Either the PEM key, or a path to the key
     *      "pempass":      The PEM pass phrase
     *      "timeout":      An int representing the connection timeout
     *      "buffer size":  An int respresenting the size of the message buffer
     *      "max message":  An int respresenting the maximum transmission size
     *
     * @param pref      The address settings
     *
     * @return a reference to this address for chaining purposes.
     */
    WebSocketConfig& set(const std::shared_ptr<JsonValue>& pref);

};

    }
}

#endif /* __CU_WEBSOCKET_CONFIG_H__ */
